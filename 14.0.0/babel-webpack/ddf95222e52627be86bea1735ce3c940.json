{"ast":null,"code":"(function (Prism) {\n  var brackets = /(?:\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}|\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)/.source;\n  Prism.languages.perl = {\n    'comment': [{\n      // POD\n      pattern: /(^\\s*)=\\w[\\s\\S]*?=cut.*/m,\n      lookbehind: true,\n      greedy: true\n    }, {\n      pattern: /(^|[^\\\\$])#.*/,\n      lookbehind: true,\n      greedy: true\n    }],\n    // TODO Could be nice to handle Heredoc too.\n    'string': [{\n      pattern: RegExp(/\\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\\s*/.source + '(?:' + [// q/.../\n      /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, // q a...a\n      // eslint-disable-next-line regexp/strict\n      /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source, // q(...)\n      // q{...}\n      // q[...]\n      // q<...>\n      brackets].join('|') + ')'),\n      greedy: true\n    }, // \"...\", `...`\n    {\n      pattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: true\n    }, // '...'\n    // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '\n    {\n      pattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n      greedy: true\n    }],\n    'regex': [{\n      pattern: RegExp(/\\b(?:m|qr)(?![a-zA-Z0-9])\\s*/.source + '(?:' + [// m/.../\n      /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, // m a...a\n      // eslint-disable-next-line regexp/strict\n      /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source, // m(...)\n      // m{...}\n      // m[...]\n      // m<...>\n      brackets].join('|') + ')' + /[msixpodualngc]*/.source),\n      greedy: true\n    }, // The lookbehinds prevent -s from breaking\n    {\n      pattern: RegExp(/(^|[^-])\\b(?:s|tr|y)(?![a-zA-Z0-9])\\s*/.source + '(?:' + [// s/.../.../\n      // eslint-disable-next-line regexp/strict\n      /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source, // s a...a...a\n      // eslint-disable-next-line regexp/strict\n      /([a-zA-Z0-9])(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3/.source, // s(...)(...)\n      // s{...}{...}\n      // s[...][...]\n      // s<...><...>\n      // s(...)[...]\n      brackets + /\\s*/.source + brackets].join('|') + ')' + /[msixpodualngcer]*/.source),\n      lookbehind: true,\n      greedy: true\n    }, // /.../\n    // The look-ahead tries to prevent two divisions on\n    // the same line from being highlighted as regex.\n    // This does not support multi-line regex.\n    {\n      pattern: /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\\b))/,\n      greedy: true\n    }],\n    // FIXME Not sure about the handling of ::, ', and #\n    'variable': [// ${^POSTMATCH}\n    /[&*$@%]\\{\\^[A-Z]+\\}/, // $^V\n    /[&*$@%]\\^[A-Z_]/, // ${...}\n    /[&*$@%]#?(?=\\{)/, // $foo\n    /[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+(?![\\w$]))+(?:::)*/, // $1\n    /[&*$@%]\\d+/, // $_, @_, %!\n    // The negative lookahead prevents from breaking the %= operator\n    /(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/],\n    'filehandle': {\n      // <>, <FOO>, _\n      pattern: /<(?![<=])\\S*?>|\\b_\\b/,\n      alias: 'symbol'\n    },\n    'v-string': {\n      // v1.2, 1.2.3\n      pattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\n      alias: 'string'\n    },\n    'function': {\n      pattern: /(\\bsub[ \\t]+)\\w+/,\n      lookbehind: true\n    },\n    'keyword': /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\n    'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\n    'operator': /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\\b/,\n    'punctuation': /[{}[\\];(),:]/\n  };\n})(Prism);","map":{"version":3,"names":["Prism","brackets","source","languages","perl","pattern","lookbehind","greedy","RegExp","join","alias"],"sources":["/Users/dbuddha/CODEBASE/github/ngx-md/ngx-md/node_modules/prismjs/components/prism-perl.js"],"sourcesContent":["(function (Prism) {\n\n\tvar brackets = /(?:\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}|\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)/.source;\n\n\tPrism.languages.perl = {\n\t\t'comment': [\n\t\t\t{\n\t\t\t\t// POD\n\t\t\t\tpattern: /(^\\s*)=\\w[\\s\\S]*?=cut.*/m,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(^|[^\\\\$])#.*/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\t\t// TODO Could be nice to handle Heredoc too.\n\t\t'string': [\n\t\t\t{\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\t/\\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\\s*/.source +\n\t\t\t\t\t'(?:' +\n\t\t\t\t\t[\n\t\t\t\t\t\t// q/.../\n\t\t\t\t\t\t/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n\n\t\t\t\t\t\t// q a...a\n\t\t\t\t\t\t// eslint-disable-next-line regexp/strict\n\t\t\t\t\t\t/([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n\n\t\t\t\t\t\t// q(...)\n\t\t\t\t\t\t// q{...}\n\t\t\t\t\t\t// q[...]\n\t\t\t\t\t\t// q<...>\n\t\t\t\t\t\tbrackets,\n\t\t\t\t\t].join('|') +\n\t\t\t\t\t')'\n\t\t\t\t),\n\t\t\t\tgreedy: true\n\t\t\t},\n\n\t\t\t// \"...\", `...`\n\t\t\t{\n\t\t\t\tpattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\n\t\t\t// '...'\n\t\t\t// FIXME Multi-line single-quoted strings are not supported as they would break variables containing '\n\t\t\t{\n\t\t\t\tpattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\t\t'regex': [\n\t\t\t{\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\t/\\b(?:m|qr)(?![a-zA-Z0-9])\\s*/.source +\n\t\t\t\t\t'(?:' +\n\t\t\t\t\t[\n\t\t\t\t\t\t// m/.../\n\t\t\t\t\t\t/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n\n\t\t\t\t\t\t// m a...a\n\t\t\t\t\t\t// eslint-disable-next-line regexp/strict\n\t\t\t\t\t\t/([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n\n\t\t\t\t\t\t// m(...)\n\t\t\t\t\t\t// m{...}\n\t\t\t\t\t\t// m[...]\n\t\t\t\t\t\t// m<...>\n\t\t\t\t\t\tbrackets,\n\t\t\t\t\t].join('|') +\n\t\t\t\t\t')' +\n\t\t\t\t\t/[msixpodualngc]*/.source\n\t\t\t\t),\n\t\t\t\tgreedy: true\n\t\t\t},\n\n\t\t\t// The lookbehinds prevent -s from breaking\n\t\t\t{\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\t/(^|[^-])\\b(?:s|tr|y)(?![a-zA-Z0-9])\\s*/.source +\n\t\t\t\t\t'(?:' +\n\t\t\t\t\t[\n\t\t\t\t\t\t// s/.../.../\n\t\t\t\t\t\t// eslint-disable-next-line regexp/strict\n\t\t\t\t\t\t/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n\n\t\t\t\t\t\t// s a...a...a\n\t\t\t\t\t\t// eslint-disable-next-line regexp/strict\n\t\t\t\t\t\t/([a-zA-Z0-9])(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3/.source,\n\n\t\t\t\t\t\t// s(...)(...)\n\t\t\t\t\t\t// s{...}{...}\n\t\t\t\t\t\t// s[...][...]\n\t\t\t\t\t\t// s<...><...>\n\t\t\t\t\t\t// s(...)[...]\n\t\t\t\t\t\tbrackets + /\\s*/.source + brackets,\n\t\t\t\t\t].join('|') +\n\t\t\t\t\t')' +\n\t\t\t\t\t/[msixpodualngcer]*/.source\n\t\t\t\t),\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t},\n\n\t\t\t// /.../\n\t\t\t// The look-ahead tries to prevent two divisions on\n\t\t\t// the same line from being highlighted as regex.\n\t\t\t// This does not support multi-line regex.\n\t\t\t{\n\t\t\t\tpattern: /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\\b))/,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\n\t\t// FIXME Not sure about the handling of ::, ', and #\n\t\t'variable': [\n\t\t\t// ${^POSTMATCH}\n\t\t\t/[&*$@%]\\{\\^[A-Z]+\\}/,\n\t\t\t// $^V\n\t\t\t/[&*$@%]\\^[A-Z_]/,\n\t\t\t// ${...}\n\t\t\t/[&*$@%]#?(?=\\{)/,\n\t\t\t// $foo\n\t\t\t/[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+(?![\\w$]))+(?:::)*/,\n\t\t\t// $1\n\t\t\t/[&*$@%]\\d+/,\n\t\t\t// $_, @_, %!\n\t\t\t// The negative lookahead prevents from breaking the %= operator\n\t\t\t/(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/\n\t\t],\n\t\t'filehandle': {\n\t\t\t// <>, <FOO>, _\n\t\t\tpattern: /<(?![<=])\\S*?>|\\b_\\b/,\n\t\t\talias: 'symbol'\n\t\t},\n\t\t'v-string': {\n\t\t\t// v1.2, 1.2.3\n\t\t\tpattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\n\t\t\talias: 'string'\n\t\t},\n\t\t'function': {\n\t\t\tpattern: /(\\bsub[ \\t]+)\\w+/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'keyword': /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\n\t\t'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\n\t\t'operator': /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\\b/,\n\t\t'punctuation': /[{}[\\];(),:]/\n\t};\n\n}(Prism));\n"],"mappings":"AAAC,WAAUA,KAAV,EAAiB;EAEjB,IAAIC,QAAQ,GAAG,6GAA6GC,MAA5H;EAEAF,KAAK,CAACG,SAAN,CAAgBC,IAAhB,GAAuB;IACtB,WAAW,CACV;MACC;MACAC,OAAO,EAAE,0BAFV;MAGCC,UAAU,EAAE,IAHb;MAICC,MAAM,EAAE;IAJT,CADU,EAOV;MACCF,OAAO,EAAE,eADV;MAECC,UAAU,EAAE,IAFb;MAGCC,MAAM,EAAE;IAHT,CAPU,CADW;IActB;IACA,UAAU,CACT;MACCF,OAAO,EAAEG,MAAM,CACd,qCAAqCN,MAArC,GACA,KADA,GAEA,CACC;MACA,mDAAmDA,MAFpD,EAIC;MACA;MACA,2CAA2CA,MAN5C,EAQC;MACA;MACA;MACA;MACAD,QAZD,EAaEQ,IAbF,CAaO,GAbP,CAFA,GAgBA,GAjBc,CADhB;MAoBCF,MAAM,EAAE;IApBT,CADS,EAwBT;IACA;MACCF,OAAO,EAAE,kCADV;MAECE,MAAM,EAAE;IAFT,CAzBS,EA8BT;IACA;IACA;MACCF,OAAO,EAAE,uBADV;MAECE,MAAM,EAAE;IAFT,CAhCS,CAfY;IAoDtB,SAAS,CACR;MACCF,OAAO,EAAEG,MAAM,CACd,+BAA+BN,MAA/B,GACA,KADA,GAEA,CACC;MACA,mDAAmDA,MAFpD,EAIC;MACA;MACA,2CAA2CA,MAN5C,EAQC;MACA;MACA;MACA;MACAD,QAZD,EAaEQ,IAbF,CAaO,GAbP,CAFA,GAgBA,GAhBA,GAiBA,mBAAmBP,MAlBL,CADhB;MAqBCK,MAAM,EAAE;IArBT,CADQ,EAyBR;IACA;MACCF,OAAO,EAAEG,MAAM,CACd,yCAAyCN,MAAzC,GACA,KADA,GAEA,CACC;MACA;MACA,8EAA8EA,MAH/E,EAKC;MACA;MACA,sEAAsEA,MAPvE,EASC;MACA;MACA;MACA;MACA;MACAD,QAAQ,GAAG,MAAMC,MAAjB,GAA0BD,QAd3B,EAeEQ,IAfF,CAeO,GAfP,CAFA,GAkBA,GAlBA,GAmBA,qBAAqBP,MApBP,CADhB;MAuBCI,UAAU,EAAE,IAvBb;MAwBCC,MAAM,EAAE;IAxBT,CA1BQ,EAqDR;IACA;IACA;IACA;IACA;MACCF,OAAO,EAAE,2HADV;MAECE,MAAM,EAAE;IAFT,CAzDQ,CApDa;IAmHtB;IACA,YAAY,CACX;IACA,qBAFW,EAGX;IACA,iBAJW,EAKX;IACA,iBANW,EAOX;IACA,qDARW,EASX;IACA,YAVW,EAWX;IACA;IACA,mDAbW,CApHU;IAmItB,cAAc;MACb;MACAF,OAAO,EAAE,sBAFI;MAGbK,KAAK,EAAE;IAHM,CAnIQ;IAwItB,YAAY;MACX;MACAL,OAAO,EAAE,iCAFE;MAGXK,KAAK,EAAE;IAHI,CAxIU;IA6ItB,YAAY;MACXL,OAAO,EAAE,kBADE;MAEXC,UAAU,EAAE;IAFD,CA7IU;IAiJtB,WAAW,4MAjJW;IAkJtB,UAAU,6GAlJY;IAmJtB,YAAY,+MAnJU;IAoJtB,eAAe;EApJO,CAAvB;AAuJA,CA3JA,EA2JCN,KA3JD,CAAD"},"metadata":{},"sourceType":"script"}